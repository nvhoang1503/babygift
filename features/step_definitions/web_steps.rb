# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(locator) { yield } : yield
  end
end
World(WithinHelpers)

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

Then /^I visited "([^"]*)" mail a link to reset your password$/ do |email|
  user = User.find_by_email(email)
  visit edit_user_password_path + "?reset_password_token=#{user.reset_password_token}"
end

Then /^I visited a link to reset your password with token "([^"]*)"$/ do |token|
  visit edit_user_password_path + "?reset_password_token=#{token}"
end

When /^(?:|I )press "([^"]*)"(?: within "([^"]*)")?$/ do |button, selector|
  with_scope(selector) do
    click_button(button)
  end
end

When /^(?:|I )press the key "([^"]*)"(?: within "([^"]*)")?$/ do |button, selector|
  with_scope(selector) do
    click_button(I18n.t(button))
  end
end

When /^(?:|I )click the element within "([^"]*)"$/ do |selector|
  find(selector).click
end

When /^(?:|I )follow "([^"]*)"(?: within "([^"]*)")?$/ do |link, selector|
  with_scope(selector) do
    click_link(link)
  end
end

When /^(?:|I )follow the key "([^"]*)"(?: within "([^"]*)")?$/ do |key, selector|
  with_scope(selector) do
    click_link(I18n.t(key))
  end
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"(?: within "([^"]*)")?$/ do |field, value, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end

When /^(?:|I )fill in "([^"]*)" with '([^']*)'(?: within "([^"]*)")?$/ do |field, value, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end

When /^(?:|I )fill in the key "([^"]*)" with "([^"]*)"(?: within "([^"]*)")?$/ do |field, value, selector|
  with_scope(selector) do
    fill_in(I18n.t(field), :with => value)
  end
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"(?: within "([^"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#

When /^I select the month "(.*?)" from "(.*?)" within "(.*?)"$/ do |value, field, selector|
  month = Date.today.month
  if month > 1 
    with_scope(selector) do
      select(value, :from => field)
    end
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"(?: within "([^"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    select(value, :from => field)
  end
end

When /^(?:|I )select the key "([^"]*)" from "([^"]*)"(?: within "([^"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    select(I18n.t(value), :from => field)
  end
end
When /^(?:|I )select "([^"]*)" from the key "([^"]*)"(?: within "([^"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    select(value, :from => I18n.t(field))
  end
end

When /^(?:|I )check "([^"]*)"(?: within "([^"]*)")?$/ do |field, selector|
  with_scope(selector) do
    check(field)
  end
end

When /^I check "([^"]*)" within the key "([^"]*)"$/ do |field, selector|
  with_scope(I18n.t(selector)) do
    check(field)
  end
end

When /^I check the key "([^"]*)" within "([^"]*)"$/ do |arg1, arg2|
  with_scope(arg2) do
    check(I18n.t(arg1))
  end
end

When /^(?:|I )uncheck "([^"]*)"(?: within "([^"]*)")?$/ do |field, selector|
  with_scope(selector) do
    uncheck(field)
  end
end

When /^(?:|I )choose "([^"]*)"(?: within "([^"]*)")?$/ do |field, selector|
  with_scope(selector) do
    choose(field)
  end
end


When /^I choose "([^"]*)" within the key "([^"]*)"$/ do |field, selector|
  with_scope(I18n.t(selector)) do
    choose(field)
  end
end


When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"(?: within "([^"]*)")?$/ do |path, field, selector|
  with_scope(selector) do
    attach_file(field, path)
  end
end

Then /^(?:|I )should see JSON:$/ do |expected_json|
  require 'json'
  expected = JSON.pretty_generate(JSON.parse(expected_json))
  actual   = JSON.pretty_generate(JSON.parse(response.body))
  expected.should == actual
end

Then /^(?:|I )should see "([^"]*)"(?: within "([^"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_content(text)
    else
      assert page.has_content?(text)
    end
  end
end

Then /^(?:|I )should see the element within "([^"]*)"$/ do |selector|
  find(selector).nil?.should be_false
end

Then /^I should see (\d+) error message\(s\) with the key "(.*?)" within "(.*?)"$/ do |num, text, selector|
  count = all(selector).length
  count.should == num.to_i
  message = first(selector).text 
  message.should == I18n.t(text)
end

Then /^I should see the error with key "(.*?)" within "(.*?)"$/ do |text, selector|
  current_month = Date.today.month
  if current_month > 1
    with_scope(selector) do
      if page.respond_to? :should
        page.should have_content(I18n.t(text))
      else
        assert page.has_content?(I18n.t(text))
      end
    end
  end
end

Then /^(?:|I )should see the key "([^"]*)"(?: within "([^"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_content(I18n.t(text))
    else
      assert page.has_content?(I18n.t(text))
    end
  end
end

Then /^I should see the key "([^"]*)" with key "([^"]*)" value "([^"]*)" within "([^"]*)"$/ do |text, key, value, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_content(I18n.t(text, key.to_sym => value))
    else
      assert page.has_content?(I18n.t(text, key.to_sym => value))
    end
  end
end

Then /^(?:|I )should not see the key "([^"]*)"(?: within "([^"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should_not have_content(I18n.t(text))
    else
      assert !page.has_content?(I18n.t(text))
    end
  end
end

Then /^(?:|I )should see \/([^\/]*)\/(?: within "([^"]*)")?$/ do |regexp, selector|
  regexp = Regexp.new(regexp)
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_xpath('//*', :text => regexp)
    else
      assert page.has_xpath?('//*', :text => regexp)
    end
  end
end

Then /^(?:|I )should not see "([^"]*)"(?: within "([^"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_no_content(text)
    else
      assert page.has_no_content?(text)
    end
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/(?: within "([^"]*)")?$/ do |regexp, selector|
  regexp = Regexp.new(regexp)
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_no_xpath('//*', :text => regexp)
    else
      assert page.has_no_xpath?('//*', :text => regexp)
    end
  end
end

Then /^the "([^"]*)" field(?: within "([^"]*)")? should contain "([^"]*)"$/ do |field, selector, value|
  with_scope(selector) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end


Then /^the "([^"]*)" checkbox(?: within "([^"]*)")? should be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the key "([^"]*)" checkbox(?: within "([^"]*)")? should be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(I18n.t(label))['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within "([^"]*)")? should not be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end

Then /^the key "([^"]*)" checkbox(?: within "([^"]*)")? should not be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(I18n.t(label))['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end

Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')}

  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end

Then /^I should not see text "([^\"]*)"(?: within "([^\"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_no_xpath("//*[not(descendant-or-self::script)][contains(@style,'display:none;') or ancestor::*[contains(@style,'display:none;')]][contains(normalize-space(.),#{text})]")
    else
      assert page.have_no_xpath?("//*[not(descendant-or-self::script)][contains(@style,'display:none;') or ancestor::*[contains(@style,'display:none;')]][contains(normalize-space(.),#{text})]")
    end
  end
end

When /^I follow image prev link$/ do
  find(:xpath, "/html/body/div/div[3]/div[2]/div/div/div/div/div").click()
end

When /^I follow image pre link$/ do
  find(:xpath, "/html/body/div/div[3]/div[2]/div[2]/div/div/div[2]/div").click()
end

When /^I follow image next link$/ do
  find(:xpath, "/html/body/div/div[3]/div[2]/div/div/div/div/div[3]").click()
end

Given(/^current date is "([^"]*)"$/) do |date_str|
  # debugger
  Timecop.travel Time.parse(date_str)
  # @now = Time.parse("Oct 01 2010")
  # Time.stub!(:now).and_return(@now)

end

Then /^I should see the text "(.*?)" in "(.*?)" within "(.*?)"$/ do |type, color, selector|
  page.should have_css(selector)
  page.evaluate_script("$('#{selector}').css('#{type}')").should == color
end

Then /^I should see button with the key "(.*?)"$/ do |button|
  find_button(I18n.t(button)).should_not be_nil
end

When /^I fill in "(.*?)" with the first gift code$/ do |field|
  code = Gift.first.gift_code
  fill_in(field, :with => code)
end

When /^I mouseover to "(.*?)"$/ do |image|
  a = "$('#{image}').mouseover()"
  puts a.inspect
  # page.evaluate_script("$('#{image}').mouseover()")
end

Given /^debugger$/ do
  debugger
end
